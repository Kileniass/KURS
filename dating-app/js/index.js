document.addEventListener('DOMContentLoaded', async () => {
    try {
        console.log('–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // Wait for tgApp initialization
        async function waitForTgApp() {
            return new Promise((resolve, reject) => {
                let attempts = 0;
                const maxAttempts = 20;
                
                const checkTgApp = () => {
                    attempts++;
                    if (window.tgApp) {
                        console.log('Telegram WebApp –Ω–∞–π–¥–µ–Ω');
                        resolve(window.tgApp);
                    } else if (attempts >= maxAttempts) {
                        console.warn('Telegram WebApp –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ ' + maxAttempts + ' –ø–æ–ø—ã—Ç–æ–∫');
                        resolve(null); // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ Telegram WebApp
                    } else {
                        setTimeout(checkTgApp, 500);
                    }
                };
                
                checkTgApp();
            });
        }

        // Get tgApp instance
        const tgApp = await waitForTgApp();
        console.log('–°—Ç–∞—Ç—É—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ tgApp:', tgApp ? '—É—Å–ø–µ—à–Ω–æ' : '–Ω–µ –Ω–∞–π–¥–µ–Ω');

        // Generate or retrieve device ID
        let deviceId = localStorage.getItem('device_id');
        if (!deviceId) {
            deviceId = crypto.randomUUID();
            localStorage.setItem('device_id', deviceId);
            console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π device_id:', deviceId);
        } else {
            console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π device_id:', deviceId);
        }

        // Initialize user profile
        try {
            console.log('–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
            
            if (!tgApp) {
                throw new Error('Telegram WebApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const initResponse = await tgApp.api.init();
            console.log('–û—Ç–≤–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', initResponse);

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
            const profile = await tgApp.api.getProfile();
            console.log('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', profile);

            if (!profile) {
                console.log('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ...');
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                const baseUrl = window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1);
                window.location.href = baseUrl + 'profile-change.html';
                return;
            }

            // Load next profile
            const nextProfileResponse = await tgApp.api.getNextProfile();
            console.log('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:', nextProfileResponse);
            
            if (nextProfileResponse && nextProfileResponse.profile) {
                displayProfile(nextProfileResponse.profile);
            } else {
                displayNoMoreProfiles();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            if (error.message.includes('404')) {
                console.log('–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ...');
                const baseUrl = window.location.pathname.substring(0, window.location.pathname.lastIndexOf('/') + 1);
                window.location.href = baseUrl + 'profile-change.html';
            } else {
                showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ' + error.message);
            }
            return;
        }

        // Add event listeners for like/dislike buttons
        document.getElementById('likeButton')?.addEventListener('click', async () => {
            try {
                const profileCard = document.querySelector('.profile-card');
                if (!profileCard) {
                    console.error('Profile card not found');
                    return;
                }
                
                const currentProfile = profileCard.dataset.profileId;
                if (!currentProfile) {
                    console.error('No profile ID found');
                    return;
                }

                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∞–π–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', currentProfile);
                const result = await tgApp.api.likeProfile(currentProfile);
                console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ª–∞–π–∫–∞:', result);
                
                if (result.match) {
                    showMatchNotification();
                }
                
                const nextProfileResponse = await tgApp.api.getNextProfile();
                console.log('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –ª–∞–π–∫–∞:', nextProfileResponse);
                
                if (nextProfileResponse && nextProfileResponse.profile) {
                    displayProfile(nextProfileResponse.profile);
                } else {
                    displayNoMoreProfiles();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∞–π–∫–∞:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ª–∞–π–∫: ' + error.message);
            }
        });

        document.getElementById('dislikeButton')?.addEventListener('click', async () => {
            try {
                const profileCard = document.querySelector('.profile-card');
                if (!profileCard) {
                    console.error('Profile card not found');
                    return;
                }
                
                const currentProfile = profileCard.dataset.profileId;
                if (!currentProfile) {
                    console.error('No profile ID found');
                    return;
                }

                console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∑–ª–∞–π–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è:', currentProfile);
                await tgApp.api.dislikeProfile(currentProfile);
                
                const nextProfileResponse = await tgApp.api.getNextProfile();
                console.log('–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ –¥–∏–∑–ª–∞–π–∫–∞:', nextProfileResponse);
                
                if (nextProfileResponse && nextProfileResponse.profile) {
                    displayProfile(nextProfileResponse.profile);
                } else {
                    displayNoMoreProfiles();
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∏–∑–ª–∞–π–∫–∞:', error);
                showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∏–∑–ª–∞–π–∫: ' + error.message);
            }
        });

    } catch (error) {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        showError('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message);
    }
});

function displayProfile(profile) {
    const profileCard = document.querySelector('.profile-card');
    profileCard.dataset.profileId = profile.id;
    
    document.getElementById('profileName').textContent = profile.name;
    document.getElementById('profileAge').textContent = profile.age;
    
    if (profile.car) {
        document.getElementById('profileCar').textContent = profile.car;
        document.getElementById('carSection').style.display = 'block';
    } else {
        document.getElementById('carSection').style.display = 'none';
    }
    
    if (profile.region) {
        document.getElementById('profileRegion').textContent = profile.region;
        document.getElementById('regionSection').style.display = 'block';
    } else {
        document.getElementById('regionSection').style.display = 'none';
    }
    
    if (profile.about) {
        document.getElementById('profileAbout').textContent = profile.about;
        document.getElementById('aboutSection').style.display = 'block';
    } else {
        document.getElementById('aboutSection').style.display = 'none';
    }
    
    const profileImage = document.getElementById('profileImage');
    if (profile.photo_url) {
        profileImage.src = profile.photo_url;
        profileImage.alt = `${profile.name}'s photo`;
    } else {
        profileImage.src = 'images/default-profile.jpg';
        profileImage.alt = 'Default profile photo';
    }
}

function displayNoMoreProfiles() {
    const profileCard = document.querySelector('.profile-card');
    profileCard.innerHTML = `
        <div class="no-profiles">
            <h2>No more profiles</h2>
            <p>Check back later for new matches!</p>
        </div>
    `;
    document.getElementById('likeButton').disabled = true;
    document.getElementById('dislikeButton').disabled = true;
}

function showMatchNotification() {
    const notification = document.createElement('div');
    notification.className = 'match-notification';
    notification.innerHTML = `
        <div class="match-content">
            <h3>It's a match! üéâ</h3>
            <p>You can now chat with this person</p>
            <button onclick="this.parentElement.parentElement.remove()">OK</button>
        </div>
    `;
    document.body.appendChild(notification);
}

function showError(message) {
    const notification = document.createElement('div');
    notification.className = 'error-notification';
    notification.innerHTML = `
        <div class="error-content">
            <h3>Error</h3>
            <p>${message}</p>
            <button onclick="this.parentElement.parentElement.remove()">OK</button>
        </div>
    `;
    document.body.appendChild(notification);
} 